# Adjusted from the brilliant Ivan Tustanivsky who developed this for Sentry
#
# Credits to https://github.com/outoftheboxplugins/BuildMachines

name: Compile Plugin

on:
  workflow_call:
    inputs:
      ue_versions:
        # Ex: "['5.1.1', '5.2.2', '5.3.2']"
        default: "['5.3.2', '5.4.4', '5.5.0-preview-1']"
        description: Specify the list of unreal versions to build against
        type: string

      platform:
        default: Linux
        description: Target platform to build on (Linux or Windows)
        type: string

      # if plugin to build lives under a sub-directory in the repo
      plugin_path:
        default: ""
        description: if plugin to build lives under a sub-directory in the repo
        type: string

      # if tests are contained in their own plugin, under a sub-directory in the repo (Tests plugin lives in the same repo)
      tests_plugin_path:
        default: ""
        description: if tests are contained in their own plugin, under a sub-directory in the repo (Tests plugin lives in the same repo)
        type: string

      # if tests are contained in their own plugin and lives in another repository (will checkout the project within TP_Blank test project where tests are run)
      tests_plugin_repository:
        default: ""
        description: if tests are contained in their own plugin and lives in another repository (will checkout the project within TP_Blank test project where tests are run)
        type: string

      # Name of the Filter to pass down to Automation RunTests ...
      tests_suite:
        default: ""
        description: Name of the Filter to pass down to Automation RunTests (if empty or not supplied, will skip test run)
        type: string

# Idea is to run the job in parallel in all three last engine versions, uncomment concurency group to only allow one at a time
# concurrency:
#   group: linux-compile-${{ github.head_ref }}
#   cancel-in-progress: true

jobs:

  linux-build-plugin:
    name: Compile (Linux) - ${{ matrix.unreal }}

    if: github.actor == 'mklabs' && inputs.platform == 'Linux'
    runs-on: [self-hosted, Windows]

    strategy:
      matrix:
        unreal: ${{ fromJson(inputs.ue_versions) }}

    steps:
      - uses: actions/checkout@v4

      - name: Get short SHA
        run: echo "SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV

      - name: Set container name
        run: echo "CONTAINER_NAME=$("unreal-${{ matrix.unreal }}-${{ env.SHORT_SHA }}")" >> $env:GITHUB_ENV

      - name: Switch to Linux Container
        run: |
          & "$Env:ProgramFiles\Docker\Docker\DockerCli.exe" -Verbose -SwitchLinuxEngine

      # the ue4 group in the docker container: gid=1000
      # Credits https://github.com/outoftheboxplugins/BuildMachines/blob/master/.github/workflows/compile-plugin.yml#L51
      - name: Run Docker container
        run: |
          echo ${{ secrets.DOCKER_TOKEN }} | docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker run -td --name ${{ env.CONTAINER_NAME }} -v ${{ github.workspace }}:/workspace --workdir /workspace --user 1234:1000 --env PATH="/home/gh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" ghcr.io/epicgames/unreal-engine:dev-slim-${{ matrix.unreal }}

          # Chown some paths to the GH user to make UE5 work properly
          # For Plugins, would ideally be better to only chown their Content/ directory
          docker exec --user root ${{ env.CONTAINER_NAME }} chown -R 1234 /home/ue4/UnrealEngine/Engine/Binaries/ThirdParty/Mono/Linux
          docker exec --user root ${{ env.CONTAINER_NAME }} chown -R 1234 /home/ue4/UnrealEngine/Engine/Binaries/ThirdParty/DotNet
          # docker exec --user root ${{ env.CONTAINER_NAME }} chown -R 1234 /home/ue4/UnrealEngine/Engine/Plugins/VirtualProduction/CaptureData/Intermediate/Build/Linux/UnrealEditor/Inc/CaptureDataUtils/UHT/Timestamp
          docker exec --user root ${{ env.CONTAINER_NAME }} chown -R 1234 /home/ue4/UnrealEngine/Engine/Plugins/VirtualProduction/CaptureData/

          # Note: These two are nice to have to avoid some warnings down the line during test about permission issues on Content folders
          # but that takes a lot of time for docker to process
          # docker exec --user root ${{ env.CONTAINER_NAME }} chown -R 1234 /home/ue4/UnrealEngine/Engine/Content
          # docker exec --user root ${{ env.CONTAINER_NAME }} chown -R 1234 /home/ue4/UnrealEngine/Engine/Plugins

          # trying to fix unable to copy .git/objects in 5.5-preview-1 container: https://github.com/combo-graph/combo-graph/actions/runs/11394285232/job/31704693114?pr=56
          # docker exec --user root ${{ env.CONTAINER_NAME }} chown -R 1234 /workspace

          # Add the user so it has a home directory (needed for the test run later on)
          docker exec --user root ${{ env.CONTAINER_NAME }} useradd -u 1234 -g 1000 --create-home gh


      - name: Set TEST_PLUGIN_NAME
        if: ${{ inputs.tests_suite != '' && inputs.tests_plugin_repository != '' }}
        run: echo "TEST_PLUGIN_NAME=$(("${{ inputs.tests_plugin_repository }}" -split "/")[1])" >> $env:GITHUB_ENV

      - name: Installing UE CLI
        run: |
          docker exec ${{ env.CONTAINER_NAME }} pip3 install --upgrade pip
          docker exec ${{ env.CONTAINER_NAME }} pip3 install ue4cli
          docker exec ${{ env.CONTAINER_NAME }} ue4 setroot /home/ue4/UnrealEngine

      - name: Package plugin
        # run: docker exec -w /workspace/${{ inputs.plugin_path }} ${{ env.CONTAINER_NAME }} ue4 package

        # trying to fix unable to copy .git/objects in 5.5-preview-1 container: https://github.com/combo-graph/combo-graph/actions/runs/11394285232/job/31704693114?pr=56
        run: |
          docker exec -w /workspace/ rm -rf .git
          docker exec -w /workspace/${{ inputs.plugin_path }} ${{ env.CONTAINER_NAME }} ue4 package

      - name: Setup TP_Blank template project to run tests within > sparse checkout of EpicGames/UnrealEngine/Templates/TP_Blank
        if: ${{ inputs.tests_suite != '' }}
        uses: actions/checkout@v4
        with:
          repository: EpicGames/UnrealEngine
          token: ${{ secrets.DOCKER_TOKEN }}
          # Append "-release" prefix only if not a preview tag. If a preview tag, docker image tag is expected to be the exact same as git release tag (after dev-slim-, e.g. ${{ matrix.unreal }})
          ref: ${{ matrix.unreal }}${{ !contains(matrix.unreal, 'preview') && '-release' || '' }}
          path: TP
          sparse-checkout: Templates/TP_Blank
          sparse-checkout-cone-mode: false

      - name: Setup TP_Blank template project to run tests within > make Plugins/ dir
        if: ${{ inputs.tests_suite != '' }}
        run: |
          npx -y shx mkdir -p TP/Templates/TP_Blank/Plugins

      # case plugin_path is provided
      - name: Setup TP_Blank template project to run tests within > Copy plugin to Plugins/
        if: ${{ inputs.tests_suite != '' && inputs.plugin_path != '' }}
        run: |
          npx -y shx cp -r ${{ inputs.plugin_path }}/dist TP/Templates/TP_Blank/Plugins/${{ inputs.plugin_path }}

      # case plugin_path is empty
      - name: Setup TP_Blank template project to run tests within > Copy plugin to Plugins/
        if: ${{ inputs.tests_suite != '' && inputs.plugin_path == '' }}
        run: |
          npx -y shx cp -r dist TP/Templates/TP_Blank/Plugins/${{ github.event.repository.name }}

      # case tests_plugin_path is provided (Tests plugin lives in the same repo)
      - name: Setup TP_Blank template project to run tests within > Copy tests plugin to Plugins
        if: ${{ inputs.tests_suite != '' && inputs.tests_plugin_path != '' }}
        run: |
          npx -y shx cp -r ${{ inputs.tests_plugin_path }} TP/Templates/TP_Blank/Plugins/${{ inputs.tests_plugin_path }}

      # case Tests plugin is in another repo
      - name: Checkout Test repo within TP_Blank
        if: ${{ inputs.tests_suite != '' && inputs.tests_plugin_repository != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.tests_plugin_repository }}
          path: TP/Templates/TP_Blank/Plugins/${{ env.TEST_PLUGIN_NAME }}

      - name: ue4 build Development Editor TP_Blank
        if: ${{ inputs.tests_suite != '' }}
        run: docker exec -w /workspace/TP/Templates/TP_Blank ${{ env.CONTAINER_NAME }} ue4 build Development Editor
        working-directory: ${{ github.workspace }}/TP/Templates/TP_Blank

      # Note: Got "Refusing to run with the root privileges." error when running the test suite
      # Trying with creating 1234 "gh" user
      - name: Run Tests (editor mode, no -game)
        if: ${{ inputs.tests_suite != '' }}
        run: docker exec -w /workspace/TP/Templates/TP_Blank ${{ env.CONTAINER_NAME }} ue4 editor "/workspace/TP/Templates/TP_Blank/TP_Blank.uproject" -ExecCmds="Automation RunTests ${{ inputs.tests_suite }};quit" -unattended -nopause -buildmachine -stdout -fullstdoutlogoutput -forcelogflush -nosplash -nullrhi -ReportOutputPath="/workspace/TestReports/TestReports-${{ matrix.unreal }}-Linux-${{ env.SHORT_SHA }}"
        working-directory: ${{ github.workspace }}/TP/Templates/TP_Blank

      - name: Setup test report index.html (see https://gist.github.com/mklabs/98a3badabcdef902618e0a59a935b597)
        if: always() && inputs.tests_suite != ''
        run: |
          docker exec --user root ${{ env.CONTAINER_NAME }} sudo apt-get -y install nodejs
          docker exec -w /workspace/TestReports/TestReports-${{ matrix.unreal }}-Linux-${{ env.SHORT_SHA }} ${{ env.CONTAINER_NAME }} curl https://gist.githubusercontent.com/mklabs/98a3badabcdef902618e0a59a935b597/raw/2596dfff2f4c9aa40d9e361af7a6d495ccddae94/index.html > index.html
          echo "console.log('const json = ' + JSON.stringify(require('./index.json'), null, 4) + ';')" | node - > json.js
        working-directory: ${{ github.workspace }}\TestReports\TestReports-${{ matrix.unreal }}-Linux-${{ env.SHORT_SHA }}

      - name: Upload test artifacts
        if: always() && inputs.tests_suite != ''
        uses: actions/upload-artifact@v3
        with:
          name: TestReports-${{ matrix.unreal }}-Linux-${{ env.SHORT_SHA }}
          path: ${{ github.workspace }}/TestReports/TestReports-${{ matrix.unreal }}-Linux-${{ env.SHORT_SHA }}/*

      - name: rm container
        if: always()
        run: |
          docker stop ${{ env.CONTAINER_NAME }}
          docker rm ${{ env.CONTAINER_NAME }}


  windows-build-plugin:
    name: Compile (Windows) - ${{ matrix.unreal }}

    if: github.actor == 'mklabs' && inputs.platform == 'Windows'
    runs-on: [self-hosted, Windows]

    strategy:
      matrix:
        unreal: ${{ fromJson(inputs.ue_versions) }}

    steps:
      - uses: actions/checkout@v4

      - name: Get short SHA
        run: echo "SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV

      - name: Set container name
        run: echo "CONTAINER_NAME=$("unreal-win64-${{ matrix.unreal }}-${{ env.SHORT_SHA }}")" >> $env:GITHUB_ENV

      - name: Switch to Windows Container
        run: |
          & "$Env:ProgramFiles\Docker\Docker\DockerCli.exe" -Verbose -SwitchWindowsEngine

      # the ue4 group in the docker container: gid=1000
      # Credits https://github.com/outoftheboxplugins/BuildMachines/blob/master/.github/workflows/compile-plugin.yml#L51
      - name: Run Docker container
        run: |
          echo ${{ secrets.DOCKER_TOKEN }} | docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          # --device class/5B45201D-F2F2-4F3B-85BB-30FF1F953599 to run with GPU acceleration
          docker run --isolation process --device class/5B45201D-F2F2-4F3B-85BB-30FF1F953599 -td --name ${{ env.CONTAINER_NAME }} -v ${{ github.workspace }}:C:\workspace --workdir C:\workspace adamrehn/ue4-minimal:5.3.2

      - name: Install nodejs
        run: docker exec ${{ env.CONTAINER_NAME }} cinst nodejs.install -y

      - name: Installing UE CLI
        run: |
          docker exec ${{ env.CONTAINER_NAME }} pip3 install --upgrade pip
          docker exec ${{ env.CONTAINER_NAME }} pip3 install ue4cli
          docker exec ${{ env.CONTAINER_NAME }} ue4 setroot "C:\UnrealEngine"

      - name: Package plugin
        run: docker exec -w C:\workspace\${{ inputs.plugin_path }} ${{ env.CONTAINER_NAME }} ue4 package

      # Note: Would only work with main plugin and tests plugin separated, eg. ./Plugin and ./PluginTests
      # Would need to rework the worfklow or provide more input options for more flexibility
      - name: Setup TP_Blank template project to run tests within
        if: ${{ inputs.tests_suite != '' }}
        run: |
          npx -y shx cp -r "${{ secrets.WIN_UNREAL_ENGINE_ROOT }}UE_${{ matrix.unreal }}/Templates/TP_Blank" TP_Blank
          npx -y shx mkdir -p TP_Blank/Plugins
          npx -y shx cp -r ${{ inputs.plugin_path }}/dist TP_Blank/Plugins/${{ inputs.plugin_path }}
          npx -y shx cp -r ${{ inputs.plugin_path }}Tests TP_Blank/Plugins/${{ inputs.plugin_path }}Tests

          # Troubles running those commands (even with Copy-Item) in the container
          # docker exec ${{ env.CONTAINER_NAME }} npx -y shx cp -r "C:\UnrealEngine\Templates\TP_Blank" "C:\workspace\TP_Blank"
          # docker exec ${{ env.CONTAINER_NAME }} npx -y shx mkdir -p TP_Blank/Plugins
          # docker exec ${{ env.CONTAINER_NAME }} npx -y shx cp -r ${{ inputs.plugin_path }}/dist TP_Blank/Plugins/${{ inputs.plugin_path }}
          # docker exec ${{ env.CONTAINER_NAME }} npx -y shx cp -r ${{ inputs.plugin_path }}Tests TP_Blank/Plugins/${{ inputs.plugin_path }}Tests

      - name: Disable WindowsMoviePlayer plugin for test run
        # WindowsMoviePlayer crashes on WindowsMoviePlayer.cpp
        run: |
          node -pe 'const { readFileSync, writeFileSync } = require("fs"); const o = JSON.parse(readFileSync("./TP_Blank.uproject", "utf8")); o.Plugins.push({ Name: "WindowsMoviePlayer", Enabled: false }); writeFileSync("./TP_Blank.uproject", JSON.stringify(o, null, "\t"))'
        working-directory: ${{ github.workspace }}/TP_Blank

      - name: ue4 build Development Editor TP_Blank
        if: ${{ inputs.tests_suite != '' }}
        run: docker exec -w C:\workspace\TP_Blank ${{ env.CONTAINER_NAME }} ue4 build Development Editor
        working-directory: ${{ github.workspace }}/TP_Blank

      # Note: Got "Refusing to run with the root privileges." error when running the test suite
      # Trying with creating 1234 "gh" user
      - name: Run Tests (editor mode, no -game)
        if: ${{ inputs.tests_suite != '' }}
        run: docker exec -w C:\workspace\TP_Blank ${{ env.CONTAINER_NAME }} ue4 editor "C:\workspace\TP_Blank\TP_Blank.uproject" -ExecCmds="Automation RunTests ${{ inputs.tests_suite }};quit" -unattended -nopause -buildmachine -stdout -fullstdoutlogoutput -forcelogflush -nosplash -nullrhi -ReportOutputPath="C:\workspace\TestReports\TestReports-${{ matrix.unreal }}-Windows-${{ env.SHORT_SHA }}"

      - name: Setup test report index.html (see https://gist.github.com/mklabs/98a3badabcdef902618e0a59a935b597)
        if: always() && inputs.tests_suite != ''
        run: |
          Invoke-WebRequest -Uri https://gist.githubusercontent.com/mklabs/98a3badabcdef902618e0a59a935b597/raw/2596dfff2f4c9aa40d9e361af7a6d495ccddae94/index.html -OutFile index.html
          echo "console.log('const json = ' + JSON.stringify(require('./index.json'), null, 4) + ';')" | node - > json.js
        working-directory: ${{ github.workspace }}\TestReports\TestReports-${{ matrix.unreal }}-Windows-${{ env.SHORT_SHA }}

      - name: Upload test artifacts
        if: always() && inputs.tests_suite != ''
        uses: actions/upload-artifact@v3
        with:
          name: TestReports-${{ matrix.unreal }}-Windows-${{ env.SHORT_SHA }}
          path: ${{ github.workspace }}/TestReports/TestReports-${{ matrix.unreal }}-Windows-${{ env.SHORT_SHA }}/*

      - name: rm container
        if: always()
        run: |
          docker stop ${{ env.CONTAINER_NAME }}
          docker rm ${{ env.CONTAINER_NAME }}
